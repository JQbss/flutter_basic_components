// Mocks generated by Mockito 5.1.0 from annotations
// in flutter_basic_components/test/api/event_api_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:ui' as _i6;

import 'package:flutter/material.dart' as _i1;
import 'package:flutter_basic_components/model/event.dart' as _i5;
import 'package:mockito/mockito.dart' as _i2;

import 'event_api_test.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeGlobalKey_0<T extends _i1.State<_i1.StatefulWidget>> extends _i2.Fake
    implements _i1.GlobalKey<T> {}

class _FakeTextEditingController_1 extends _i2.Fake
    implements _i1.TextEditingController {}

class _FakeDateTime_2 extends _i2.Fake implements DateTime {}

/// A class which mocks [EventRepositoryTest].
///
/// See the documentation for Mockito's code generation for more information.
class MockEventRepositoryTest extends _i2.Mock
    implements _i3.EventRepositoryTest {
  MockEventRepositoryTest() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i5.Event>? addEvent(_i5.Event? event) =>
      (super.noSuchMethod(Invocation.method(#addEvent, [event]))
          as _i4.Future<_i5.Event>?);
}

/// A class which mocks [EventViewModelTest].
///
/// See the documentation for Mockito's code generation for more information.
class MockEventViewModelTest extends _i2.Mock
    implements _i3.EventViewModelTest {
  MockEventViewModelTest() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i1.GlobalKey<_i1.FormState> get formKey =>
      (super.noSuchMethod(Invocation.getter(#formKey),
              returnValue: _FakeGlobalKey_0<_i1.FormState>())
          as _i1.GlobalKey<_i1.FormState>);
  @override
  _i1.TextEditingController get nameController =>
      (super.noSuchMethod(Invocation.getter(#nameController),
              returnValue: _FakeTextEditingController_1())
          as _i1.TextEditingController);
  @override
  DateTime get dateTime => (super.noSuchMethod(Invocation.getter(#dateTime),
      returnValue: _FakeDateTime_2()) as DateTime);
  @override
  set dateTime(DateTime? _dateTime) =>
      super.noSuchMethod(Invocation.setter(#dateTime, _dateTime),
          returnValueForMissingStub: null);
  @override
  _i1.TextEditingController get noteController =>
      (super.noSuchMethod(Invocation.getter(#noteController),
              returnValue: _FakeTextEditingController_1())
          as _i1.TextEditingController);
  @override
  List<_i5.Event> get eventList =>
      (super.noSuchMethod(Invocation.getter(#eventList),
          returnValue: <_i5.Event>[]) as List<_i5.Event>);
  @override
  set eventList(List<_i5.Event>? _eventList) =>
      super.noSuchMethod(Invocation.setter(#eventList, _eventList),
          returnValueForMissingStub: null);
  @override
  bool get isNote =>
      (super.noSuchMethod(Invocation.getter(#isNote), returnValue: false)
          as bool);
  @override
  set isNote(bool? _isNote) =>
      super.noSuchMethod(Invocation.setter(#isNote, _isNote),
          returnValueForMissingStub: null);
  @override
  set nameError(String? _nameError) =>
      super.noSuchMethod(Invocation.setter(#nameError, _nameError),
          returnValueForMissingStub: null);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  dynamic addEventHandler(_i1.BuildContext? context) =>
      super.noSuchMethod(Invocation.method(#addEventHandler, [context]));
  @override
  dynamic changeDateHandler(_i1.BuildContext? context) =>
      super.noSuchMethod(Invocation.method(#changeDateHandler, [context]));
  @override
  dynamic navigateToAddEvent(_i1.BuildContext? context) =>
      super.noSuchMethod(Invocation.method(#navigateToAddEvent, [context]));
  @override
  void addListener(_i6.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i6.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
